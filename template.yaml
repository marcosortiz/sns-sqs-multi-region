AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Cross-region SNS-SQS-Lambda setup'

Parameters:
  CreateDashboard:
    Type: String
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'
    Description: Set to true to create CloudWatch dashboard

Conditions:
  ShouldCreateDashboard: !Equals 
    - !Ref CreateDashboard
    - 'true'

Resources:
  ActiveQueue:
    Type: AWS::SQS::Queue

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ActiveQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ActiveQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SnsTopic
  QueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref SnsTopic
      Endpoint: !GetAtt ActiveQueue.Arn
  DisasterRecoveryQueue:
    Type: AWS::SQS::Queue
  DRQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref DisasterRecoveryQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt DisasterRecoveryQueue.Arn
  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt ActiveQueue.Arn
          Protocol: sqs
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt ActiveQueue.Arn
  SqsConsumer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sqs-consumer.handler
      Runtime: ruby3.3
      CodeUri: src/lambda
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      ReservedConcurrentExecutions: 1
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ActiveQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 0
            FunctionResponseTypes:
              - ReportBatchItemFailures
  DrLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt DisasterRecoveryQueue.Arn
  DrSqsConsumer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sqs-consumer.handler
      Runtime: ruby3.3
      CodeUri: src/lambda
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt DrLambdaExecutionRole.Arn
      ReservedConcurrentExecutions: 1
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DisasterRecoveryQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 0
            FunctionResponseTypes:
              - ReportBatchItemFailures
  SnsSqSMultiRegion:
    Type: AWS::CloudWatch::Dashboard
    Condition: ShouldCreateDashboard
    DeletionPolicy: Delete
    Properties:
      DashboardBody: |
        {
            "widgets": [
                {
                    "height": 9,
                    "width": 24,
                    "y": 19,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "SnsSqsMultiRegion", "Latency", "ServiceName", "SqsConsumer", { "region": "us-east-1", "id": "m1", "visible": true } ],
                            [ "...", { "region": "us-west-2", "id": "m2", "visible": true } ]
                        ],
                        "view": "timeSeries",
                        "stacked": true,
                        "region": "us-east-1",
                        "stat": "Maximum",
                        "period": 10,
                        "yAxis": {
                            "left": {
                                "label": "",
                                "showUnits": false
                            }
                        },
                        "title": "Consumer Latency (milliseconds)"
                    }
                }
            ]
        }
      
Outputs:
  SnsTopicArn:
    Value: !Ref SnsTopic
    Description: SNS Topic Arn
  ActiveQueueUrl:
    Value: !GetAtt ActiveQueue.QueueUrl
    Description: Active Queue Url
  DisasterRecoveryQueueArn:
    Value: !GetAtt DisasterRecoveryQueue.Arn
    Description: DR QUEUE Arn
  DashboardUrl:
    Condition: ShouldCreateDashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SnsSqSMultiRegion}"
    Description: URL for the CloudWatch Dashboard